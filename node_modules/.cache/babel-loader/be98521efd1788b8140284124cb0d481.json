{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier';\n\nfunction useSimplification(simplePercent) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new SimplifyModifier();\n    }\n  }, []);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n\n      if (original.current instanceof BufferGeometry) {\n        geometry = original.current.clone();\n      } else {\n        geometry = geometry.fromGeometry(original.current);\n      }\n\n      const count = Math.floor(geometry.attributes.position.count * simplePercent); // number of vertices to remove\n\n      ref.current.geometry = modifier.current.modify(geometry, count);\n    }\n  }, [simplePercent]);\n  return ref;\n}\n\nexport { useSimplification };","map":{"version":3,"names":["useRef","useEffect","BufferGeometry","SimplifyModifier","useSimplification","simplePercent","ref","original","modifier","current","geometry","clone","fromGeometry","count","Math","floor","attributes","position","modify"],"sources":["/Users/adamgif/Documents/Adam n Gif Studio/Project/Website/UT/React/eisapp/node_modules/drei/useSimplification.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { BufferGeometry } from 'three';\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier';\n\nfunction useSimplification(simplePercent) {\n  const ref = useRef();\n  const original = useRef();\n  const modifier = useRef();\n  useEffect(() => {\n    if (!original.current) {\n      original.current = ref.current.geometry.clone();\n      modifier.current = new SimplifyModifier();\n    }\n  }, []);\n  useEffect(() => {\n    if (original.current && ref.current) {\n      let geometry = new BufferGeometry();\n\n      if (original.current instanceof BufferGeometry) {\n        geometry = original.current.clone();\n      } else {\n        geometry = geometry.fromGeometry(original.current);\n      }\n\n      const count = Math.floor(geometry.attributes.position.count * simplePercent); // number of vertices to remove\n\n      ref.current.geometry = modifier.current.modify(geometry, count);\n    }\n  }, [simplePercent]);\n  return ref;\n}\n\nexport { useSimplification };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,gBAAT,QAAiC,+CAAjC;;AAEA,SAASC,iBAAT,CAA2BC,aAA3B,EAA0C;EACxC,MAAMC,GAAG,GAAGN,MAAM,EAAlB;EACA,MAAMO,QAAQ,GAAGP,MAAM,EAAvB;EACA,MAAMQ,QAAQ,GAAGR,MAAM,EAAvB;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,CAACE,OAAd,EAAuB;MACrBF,QAAQ,CAACE,OAAT,GAAmBH,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBC,KAArB,EAAnB;MACAH,QAAQ,CAACC,OAAT,GAAmB,IAAIN,gBAAJ,EAAnB;IACD;EACF,CALQ,EAKN,EALM,CAAT;EAMAF,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,CAACE,OAAT,IAAoBH,GAAG,CAACG,OAA5B,EAAqC;MACnC,IAAIC,QAAQ,GAAG,IAAIR,cAAJ,EAAf;;MAEA,IAAIK,QAAQ,CAACE,OAAT,YAA4BP,cAAhC,EAAgD;QAC9CQ,QAAQ,GAAGH,QAAQ,CAACE,OAAT,CAAiBE,KAAjB,EAAX;MACD,CAFD,MAEO;QACLD,QAAQ,GAAGA,QAAQ,CAACE,YAAT,CAAsBL,QAAQ,CAACE,OAA/B,CAAX;MACD;;MAED,MAAMI,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BJ,KAA7B,GAAqCR,aAAhD,CAAd,CATmC,CAS2C;;MAE9EC,GAAG,CAACG,OAAJ,CAAYC,QAAZ,GAAuBF,QAAQ,CAACC,OAAT,CAAiBS,MAAjB,CAAwBR,QAAxB,EAAkCG,KAAlC,CAAvB;IACD;EACF,CAdQ,EAcN,CAACR,aAAD,CAdM,CAAT;EAeA,OAAOC,GAAP;AACD;;AAED,SAASF,iBAAT"},"metadata":{},"sourceType":"module"}