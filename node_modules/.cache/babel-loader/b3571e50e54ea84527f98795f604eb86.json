{"ast":null,"code":"import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n\n    super.setColors(colors);\n    return this;\n  }\n\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n}\n\nexport { LineGeometry };","map":{"version":3,"names":["LineSegmentsGeometry","LineGeometry","constructor","isLineGeometry","type","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","attributes","position"],"sources":["/Users/adamgif/Documents/Adam n Gif Studio/Project/Website/UT/React/eisapp/node_modules/three/examples/jsm/lines/LineGeometry.js"],"sourcesContent":["import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isLineGeometry = true;\n\n\t\tthis.type = 'LineGeometry';\n\n\t}\n\n\tsetPositions( array ) {\n\n\t\t// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst points = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tpoints[ 2 * i ] = array[ i ];\n\t\t\tpoints[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tpoints[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tpoints[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tpoints[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tpoints[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setPositions( points );\n\n\t\treturn this;\n\n\t}\n\n\tsetColors( array ) {\n\n\t\t// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst colors = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tcolors[ 2 * i ] = array[ i ];\n\t\t\tcolors[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tcolors[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tcolors[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tcolors[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tcolors[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setColors( colors );\n\n\t\treturn this;\n\n\t}\n\n\tfromLine( line ) {\n\n\t\tconst geometry = line.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineGeometry };\n"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,kCAArC;;AAEA,MAAMC,YAAN,SAA2BD,oBAA3B,CAAgD;EAE/CE,WAAW,GAAG;IAEb;IAEA,KAAKC,cAAL,GAAsB,IAAtB;IAEA,KAAKC,IAAL,GAAY,cAAZ;EAEA;;EAEDC,YAAY,CAAEC,KAAF,EAAU;IAErB;IAEA,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,GAAe,CAA9B;IACA,MAAMC,MAAM,GAAG,IAAIC,YAAJ,CAAkB,IAAIF,MAAtB,CAAf;;IAEA,KAAM,IAAIG,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,MAArB,EAA6BG,CAAC,IAAI,CAAlC,EAAsC;MAErCF,MAAM,CAAE,IAAIE,CAAN,CAAN,GAAkBJ,KAAK,CAAEI,CAAF,CAAvB;MACAF,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MACAF,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MAEAF,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MACAF,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MACAF,MAAM,CAAE,IAAIE,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;IAEA;;IAED,MAAML,YAAN,CAAoBG,MAApB;IAEA,OAAO,IAAP;EAEA;;EAEDG,SAAS,CAAEL,KAAF,EAAU;IAElB;IAEA,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,GAAe,CAA9B;IACA,MAAMK,MAAM,GAAG,IAAIH,YAAJ,CAAkB,IAAIF,MAAtB,CAAf;;IAEA,KAAM,IAAIG,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,MAArB,EAA6BG,CAAC,IAAI,CAAlC,EAAsC;MAErCE,MAAM,CAAE,IAAIF,CAAN,CAAN,GAAkBJ,KAAK,CAAEI,CAAF,CAAvB;MACAE,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MACAE,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MAEAE,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MACAE,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;MACAE,MAAM,CAAE,IAAIF,CAAJ,GAAQ,CAAV,CAAN,GAAsBJ,KAAK,CAAEI,CAAC,GAAG,CAAN,CAA3B;IAEA;;IAED,MAAMC,SAAN,CAAiBC,MAAjB;IAEA,OAAO,IAAP;EAEA;;EAEDC,QAAQ,CAAEC,IAAF,EAAS;IAEhB,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;IAEA,KAAKV,YAAL,CAAmBU,QAAQ,CAACC,UAAT,CAAoBC,QAApB,CAA6BX,KAAhD,EAJgB,CAIyC;IAEzD;;IAEA,OAAO,IAAP;EAEA;;AAxE8C;;AA4EhD,SAASL,YAAT"},"metadata":{},"sourceType":"module"}