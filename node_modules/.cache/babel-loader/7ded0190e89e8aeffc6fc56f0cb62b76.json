{"ast":null,"code":"var _jsxFileName = \"/Users/adamgif/Documents/Adam n Gif Studio/Project/Website/UT/React/eisapp/src/components/BoxMesh.js\",\n    _s = $RefreshSig$();\n\n// import React, { useRef } from \"react\";\n// import { useFrame } from \"@react-three/fiber\";\n// import { useGLTF, useAnimations } from \"@react-three/drei\";\n// const BoxMesh = (props) => {\n//   const group = useRef();\n//   const { nodes, materials, animations } = useGLTF(\"/cube.glb\");\n//   const { actions } = useAnimations(animations, group);\n//   useFrame(() => (group.current.rotation.x = group.current.rotation.y += 0.01 ));\n//   return (\n//     <group ref={group} {...props} dispose={null}>\n//       <group name=\"Scene\">\n//         <mesh\n//           name=\"cubeMetal\"\n//           castShadow\n//           receiveShadow\n//           geometry={nodes.cubeMetal.geometry}\n//           material={materials.HardShell}\n//         />\n//       </group>\n//     </group>\n//   );\n// }\n// export default BoxMesh\n////////////////////////////////////////////////////////////\nimport * as THREE from 'three';\nimport React, { useRef, useState } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport { useSpring, a } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst color = new THREE.Color();\n\nconst BoxMesh = (props, onClick) => {\n  _s();\n\n  const group = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useGLTF(\"/cube.glb\");\n  const {\n    actions\n  } = useAnimations(animations, group);\n  const [hovered, setHover] = useState(false);\n  const [expand, setExpand] = useState(false); //   const enlarge = useSpring({\n  //     scale: expand ? [1.4,1.4,1.4] : [1,1,1]\n  //   })\n  //   useFrame((state) => {\n  // const t = state.clock.getElapsedTime() + Math.random * 10000\n  // group.current.rotation.set(Math.cos(t / 4) / 2, Math.sin(t / 4) / 2, Math.cos(t / 1.5) / 2)\n  // group.current.position.y = Math.sin(t / 1.5) / 2\n  // group.current.scale.x = group.current.scale.y = group.current.scale.z = THREE.MathUtils.lerp(group.current.scale.z, hovered ? 1.4 : 1, 0.1)\n  // group.current.color.lerp(color.set(hovered ? 'darkorange' : 'white'), hovered ? 2.5 : 0.6)\n  //   })\n\n  useFrame(() => group.current.rotation.x = group.current.rotation.y += 0.01);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: group,\n    ...props,\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      name: \"Scene\",\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n        onClick: () => onClick,\n        name: \"cubeMetal\",\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.cubeMetal.geometry,\n        material: materials.HardShell,\n        onPointerOver: e => (e.stopPropagation(), setHover(true)),\n        onPointerOut: e => setHover(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BoxMesh, \"FE8pgFm7hSW6kFeUdx0wKEGF3bA=\", false, function () {\n  return [useGLTF, useAnimations, useFrame];\n});\n\n_c = BoxMesh;\nexport default BoxMesh;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoxMesh\");","map":{"version":3,"names":["THREE","React","useRef","useState","useFrame","useGLTF","useAnimations","useSpring","a","color","Color","BoxMesh","props","onClick","group","nodes","materials","animations","actions","hovered","setHover","expand","setExpand","current","rotation","x","y","cubeMetal","geometry","HardShell","e","stopPropagation"],"sources":["/Users/adamgif/Documents/Adam n Gif Studio/Project/Website/UT/React/eisapp/src/components/BoxMesh.js"],"sourcesContent":["// import React, { useRef } from \"react\";\n// import { useFrame } from \"@react-three/fiber\";\n// import { useGLTF, useAnimations } from \"@react-three/drei\";\n\n// const BoxMesh = (props) => {\n//   const group = useRef();\n//   const { nodes, materials, animations } = useGLTF(\"/cube.glb\");\n//   const { actions } = useAnimations(animations, group);\n\n//   useFrame(() => (group.current.rotation.x = group.current.rotation.y += 0.01 ));\n\n//   return (\n//     <group ref={group} {...props} dispose={null}>\n//       <group name=\"Scene\">\n//         <mesh\n//           name=\"cubeMetal\"\n//           castShadow\n//           receiveShadow\n//           geometry={nodes.cubeMetal.geometry}\n//           material={materials.HardShell}\n//         />\n//       </group>\n//     </group>\n//   );\n// }\n\n// export default BoxMesh\n\n\n////////////////////////////////////////////////////////////\n\nimport * as THREE from 'three'\nimport React, { useRef, useState } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport { useSpring, a } from 'react-spring';\n\nconst color = new THREE.Color()\n\nconst BoxMesh = (props, onClick) => {\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(\"/cube.glb\");\n  const { actions } = useAnimations(animations, group);\n  const [hovered, setHover] = useState(false)\n  const [expand, setExpand] = useState(false)\n\n//   const enlarge = useSpring({\n//     scale: expand ? [1.4,1.4,1.4] : [1,1,1]\n//   })\n//   useFrame((state) => {\n    // const t = state.clock.getElapsedTime() + Math.random * 10000\n    // group.current.rotation.set(Math.cos(t / 4) / 2, Math.sin(t / 4) / 2, Math.cos(t / 1.5) / 2)\n    // group.current.position.y = Math.sin(t / 1.5) / 2\n    // group.current.scale.x = group.current.scale.y = group.current.scale.z = THREE.MathUtils.lerp(group.current.scale.z, hovered ? 1.4 : 1, 0.1)\n    // group.current.color.lerp(color.set(hovered ? 'darkorange' : 'white'), hovered ? 2.5 : 0.6)\n//   })\n\nuseFrame(() => (group.current.rotation.x = group.current.rotation.y += 0.01 ));\n  \n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group name=\"Scene\">\n        <mesh\n          onClick={() => onClick}\n          name=\"cubeMetal\"\n          castShadow\n          receiveShadow\n          geometry={nodes.cubeMetal.geometry}\n          material={materials.HardShell}\n          onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\n          onPointerOut={(e) => setHover(false)}\n        />\n      </group>\n    </group>\n  );\n}\n\nexport default BoxMesh"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,mBAAvC;AACA,SAASC,SAAT,EAAoBC,CAApB,QAA6B,cAA7B;;AAEA,MAAMC,KAAK,GAAG,IAAIT,KAAK,CAACU,KAAV,EAAd;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;EAAA;;EAClC,MAAMC,KAAK,GAAGZ,MAAM,EAApB;EACA,MAAM;IAAEa,KAAF;IAASC,SAAT;IAAoBC;EAApB,IAAmCZ,OAAO,CAAC,WAAD,CAAhD;EACA,MAAM;IAAEa;EAAF,IAAcZ,aAAa,CAACW,UAAD,EAAaH,KAAb,CAAjC;EACA,MAAM,CAACK,OAAD,EAAUC,QAAV,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;EACA,MAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,KAAD,CAApC,CALkC,CAOpC;EACA;EACA;EACA;EACI;EACA;EACA;EACA;EACA;EACJ;;EAEAC,QAAQ,CAAC,MAAOU,KAAK,CAACS,OAAN,CAAcC,QAAd,CAAuBC,CAAvB,GAA2BX,KAAK,CAACS,OAAN,CAAcC,QAAd,CAAuBE,CAAvB,IAA4B,IAA/D,CAAR;EAGE,oBACE;IAAO,GAAG,EAAEZ,KAAZ;IAAA,GAAuBF,KAAvB;IAA8B,OAAO,EAAE,IAAvC;IAAA,uBACE;MAAO,IAAI,EAAC,OAAZ;MAAA,uBACE;QACE,OAAO,EAAE,MAAMC,OADjB;QAEE,IAAI,EAAC,WAFP;QAGE,UAAU,MAHZ;QAIE,aAAa,MAJf;QAKE,QAAQ,EAAEE,KAAK,CAACY,SAAN,CAAgBC,QAL5B;QAME,QAAQ,EAAEZ,SAAS,CAACa,SANtB;QAOE,aAAa,EAAGC,CAAD,KAAQA,CAAC,CAACC,eAAF,IAAqBX,QAAQ,CAAC,IAAD,CAArC,CAPjB;QAQE,YAAY,EAAGU,CAAD,IAAOV,QAAQ,CAAC,KAAD;MAR/B;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD,CArCD;;GAAMT,O;UAEqCN,O,EACrBC,a,EAetBF,Q;;;KAlBMO,O;AAuCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}