{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Vector3 } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\n\nconst _A = new Vector3();\n\nconst _B = new Vector3();\n\nconst _C = new Vector3();\n\nclass EdgeSplitModifier {\n  modify(geometry, cutOffAngle) {\n    let tryKeepNormals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    function computeNormals() {\n      normals = new Float32Array(indexes.length * 3);\n\n      for (let i = 0; i < indexes.length; i += 3) {\n        let index = indexes[i];\n\n        _A.set(positions[3 * index], positions[3 * index + 1], positions[3 * index + 2]);\n\n        index = indexes[i + 1];\n\n        _B.set(positions[3 * index], positions[3 * index + 1], positions[3 * index + 2]);\n\n        index = indexes[i + 2];\n\n        _C.set(positions[3 * index], positions[3 * index + 1], positions[3 * index + 2]);\n\n        _C.sub(_B);\n\n        _A.sub(_B);\n\n        const normal = _C.cross(_A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          normals[3 * (i + j)] = normal.x;\n          normals[3 * (i + j) + 1] = normal.y;\n          normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    }\n\n    function mapPositionsToIndexes() {\n      pointToIndexMap = Array(positions.length / 3);\n\n      for (let i = 0; i < indexes.length; i++) {\n        const index = indexes[i];\n\n        if (pointToIndexMap[index] == null) {\n          pointToIndexMap[index] = [];\n        }\n\n        pointToIndexMap[index].push(i);\n      }\n    }\n\n    function edgeSplitToGroups(indexes, cutOff, firstIndex) {\n      _A.set(normals[3 * firstIndex], normals[3 * firstIndex + 1], normals[3 * firstIndex + 2]).normalize();\n\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (const j of indexes) {\n        if (j !== firstIndex) {\n          _B.set(normals[3 * j], normals[3 * j + 1], normals[3 * j + 2]).normalize();\n\n          if (_B.dot(_A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    }\n\n    function edgeSplit(indexes, cutOff) {\n      let original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (const index of indexes) {\n        groupResults.push(edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (const groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        splitIndexes.push({\n          original: original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    }\n\n    let hadNormals = false;\n    let oldNormals = null;\n\n    if (geometry.attributes.normal) {\n      hadNormals = true;\n      geometry = geometry.clone();\n\n      if (tryKeepNormals === true && geometry.index !== null) {\n        oldNormals = geometry.attributes.normal.array;\n      }\n\n      geometry.deleteAttribute('normal');\n    }\n\n    if (geometry.index == null) {\n      geometry = BufferGeometryUtils.mergeVertices(geometry);\n    }\n\n    const indexes = geometry.index.array;\n    const positions = geometry.getAttribute('position').array;\n    let normals;\n    let pointToIndexMap;\n    computeNormals();\n    mapPositionsToIndexes();\n    const splitIndexes = [];\n\n    for (const vertexIndexes of pointToIndexMap) {\n      edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n    }\n\n    const newAttributes = {};\n\n    for (const name of Object.keys(geometry.attributes)) {\n      const oldAttribute = geometry.attributes[name];\n      const newArray = new oldAttribute.array.constructor((indexes.length + splitIndexes.length) * oldAttribute.itemSize);\n      newArray.set(oldAttribute.array);\n      newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n    }\n\n    const newIndexes = new Uint32Array(indexes.length);\n    newIndexes.set(indexes);\n\n    for (let i = 0; i < splitIndexes.length; i++) {\n      const split = splitIndexes[i];\n      const index = indexes[split.original];\n\n      for (const attribute of Object.values(newAttributes)) {\n        for (let j = 0; j < attribute.itemSize; j++) {\n          attribute.array[(indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n        }\n      }\n\n      for (const j of split.indexes) {\n        newIndexes[j] = indexes.length + i;\n      }\n    }\n\n    geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n    for (const name of Object.keys(newAttributes)) {\n      geometry.setAttribute(name, newAttributes[name]);\n    }\n\n    if (hadNormals) {\n      geometry.computeVertexNormals();\n\n      if (oldNormals !== null) {\n        const changedNormals = new Array(oldNormals.length / 3).fill(false);\n\n        for (const splitData of splitIndexes) changedNormals[splitData.original] = true;\n\n        for (let i = 0; i < changedNormals.length; i++) {\n          if (changedNormals[i] === false) {\n            for (let j = 0; j < 3; j++) geometry.attributes.normal.array[3 * i + j] = oldNormals[3 * i + j];\n          }\n        }\n      }\n    }\n\n    return geometry;\n  }\n\n}\n\nexport { EdgeSplitModifier };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Vector3","BufferGeometryUtils","_A","_B","_C","EdgeSplitModifier","modify","geometry","cutOffAngle","tryKeepNormals","computeNormals","normals","Float32Array","indexes","length","i","index","set","positions","sub","normal","cross","normalize","j","x","y","z","mapPositionsToIndexes","pointToIndexMap","Array","push","edgeSplitToGroups","cutOff","firstIndex","result","splitGroup","currentGroup","dot","edgeSplit","original","groupResults","groupResult","splitIndexes","hadNormals","oldNormals","attributes","clone","array","deleteAttribute","mergeVertices","getAttribute","vertexIndexes","Math","cos","newAttributes","name","Object","keys","oldAttribute","newArray","constructor","itemSize","normalized","newIndexes","Uint32Array","split","attribute","values","setIndex","setAttribute","computeVertexNormals","changedNormals","fill","splitData"],"sources":["/Users/adamgif/Documents/Adam n Gif Studio/Project/Website/UT/React/eisapp/node_modules/three/examples/jsm/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tVector3\n} from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\n\nconst _A = new Vector3();\nconst _B = new Vector3();\nconst _C = new Vector3();\n\nclass EdgeSplitModifier {\n\n\tmodify( geometry, cutOffAngle, tryKeepNormals = true ) {\n\n\t\tfunction computeNormals() {\n\n\t\t\tnormals = new Float32Array( indexes.length * 3 );\n\n\t\t\tfor ( let i = 0; i < indexes.length; i += 3 ) {\n\n\t\t\t\tlet index = indexes[ i ];\n\n\t\t\t\t_A.set(\n\t\t\t\t\tpositions[ 3 * index ],\n\t\t\t\t\tpositions[ 3 * index + 1 ],\n\t\t\t\t\tpositions[ 3 * index + 2 ] );\n\n\t\t\t\tindex = indexes[ i + 1 ];\n\t\t\t\t_B.set(\n\t\t\t\t\tpositions[ 3 * index ],\n\t\t\t\t\tpositions[ 3 * index + 1 ],\n\t\t\t\t\tpositions[ 3 * index + 2 ] );\n\n\t\t\t\tindex = indexes[ i + 2 ];\n\t\t\t\t_C.set(\n\t\t\t\t\tpositions[ 3 * index ],\n\t\t\t\t\tpositions[ 3 * index + 1 ],\n\t\t\t\t\tpositions[ 3 * index + 2 ] );\n\n\t\t\t\t_C.sub( _B );\n\t\t\t\t_A.sub( _B );\n\n\t\t\t\tconst normal = _C.cross( _A ).normalize();\n\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tnormals[ 3 * ( i + j ) ] = normal.x;\n\t\t\t\t\tnormals[ 3 * ( i + j ) + 1 ] = normal.y;\n\t\t\t\t\tnormals[ 3 * ( i + j ) + 2 ] = normal.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction mapPositionsToIndexes() {\n\n\t\t\tpointToIndexMap = Array( positions.length / 3 );\n\n\t\t\tfor ( let i = 0; i < indexes.length; i ++ ) {\n\n\t\t\t\tconst index = indexes[ i ];\n\n\t\t\t\tif ( pointToIndexMap[ index ] == null ) {\n\n\t\t\t\t\tpointToIndexMap[ index ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tpointToIndexMap[ index ].push( i );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction edgeSplitToGroups( indexes, cutOff, firstIndex ) {\n\n\t\t\t_A.set( normals[ 3 * firstIndex ], normals[ 3 * firstIndex + 1 ], normals[ 3 * firstIndex + 2 ] ).normalize();\n\n\t\t\tconst result = {\n\t\t\t\tsplitGroup: [],\n\t\t\t\tcurrentGroup: [ firstIndex ]\n\t\t\t};\n\n\t\t\tfor ( const j of indexes ) {\n\n\t\t\t\tif ( j !== firstIndex ) {\n\n\t\t\t\t\t_B.set( normals[ 3 * j ], normals[ 3 * j + 1 ], normals[ 3 * j + 2 ] ).normalize();\n\n\t\t\t\t\tif ( _B.dot( _A ) < cutOff ) {\n\n\t\t\t\t\t\tresult.splitGroup.push( j );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult.currentGroup.push( j );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\n\t\tfunction edgeSplit( indexes, cutOff, original = null ) {\n\n\t\t\tif ( indexes.length === 0 ) return;\n\n\t\t\tconst groupResults = [];\n\n\t\t\tfor ( const index of indexes ) {\n\n\t\t\t\tgroupResults.push( edgeSplitToGroups( indexes, cutOff, index ) );\n\n\t\t\t}\n\n\t\t\tlet result = groupResults[ 0 ];\n\n\t\t\tfor ( const groupResult of groupResults ) {\n\n\t\t\t\tif ( groupResult.currentGroup.length > result.currentGroup.length ) {\n\n\t\t\t\t\tresult = groupResult;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif ( original != null ) {\n\n\t\t\t\tsplitIndexes.push( {\n\t\t\t\t\toriginal: original,\n\t\t\t\t\tindexes: result.currentGroup\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( result.splitGroup.length ) {\n\n\t\t\t\tedgeSplit( result.splitGroup, cutOff, original || result.currentGroup[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet hadNormals = false;\n\t\tlet oldNormals = null;\n\n\t\tif ( geometry.attributes.normal ) {\n\n\t\t\thadNormals = true;\n\n\t\t\tgeometry = geometry.clone();\n\n\t\t\tif ( tryKeepNormals === true && geometry.index !== null ) {\n\n\t\t\t\toldNormals = geometry.attributes.normal.array;\n\n\t\t\t}\n\n\t\t\tgeometry.deleteAttribute( 'normal' );\n\n\t\t}\n\n\t\tif ( geometry.index == null ) {\n\n\t\t\tgeometry = BufferGeometryUtils.mergeVertices( geometry );\n\n\t\t}\n\n\t\tconst indexes = geometry.index.array;\n\t\tconst positions = geometry.getAttribute( 'position' ).array;\n\n\t\tlet normals;\n\t\tlet pointToIndexMap;\n\n\t\tcomputeNormals();\n\t\tmapPositionsToIndexes();\n\n\t\tconst splitIndexes = [];\n\n\t\tfor ( const vertexIndexes of pointToIndexMap ) {\n\n\t\t\tedgeSplit( vertexIndexes, Math.cos( cutOffAngle ) - 0.001 );\n\n\t\t}\n\n\t\tconst newAttributes = {};\n\t\tfor ( const name of Object.keys( geometry.attributes ) ) {\n\n\t\t\tconst oldAttribute = geometry.attributes[ name ];\n\t\t\tconst newArray = new oldAttribute.array.constructor( ( indexes.length + splitIndexes.length ) * oldAttribute.itemSize );\n\t\t\tnewArray.set( oldAttribute.array );\n\t\t\tnewAttributes[ name ] = new BufferAttribute( newArray, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t}\n\n\t\tconst newIndexes = new Uint32Array( indexes.length );\n\t\tnewIndexes.set( indexes );\n\n\t\tfor ( let i = 0; i < splitIndexes.length; i ++ ) {\n\n\t\t\tconst split = splitIndexes[ i ];\n\t\t\tconst index = indexes[ split.original ];\n\n\t\t\tfor ( const attribute of Object.values( newAttributes ) ) {\n\n\t\t\t\tfor ( let j = 0; j < attribute.itemSize; j ++ ) {\n\n\t\t\t\t\tattribute.array[ ( indexes.length + i ) * attribute.itemSize + j ] =\n\t\t\t\t\t\tattribute.array[ index * attribute.itemSize + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( const j of split.indexes ) {\n\n\t\t\t\tnewIndexes[ j ] = indexes.length + i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( newIndexes, 1 ) );\n\n\t\tfor ( const name of Object.keys( newAttributes ) ) {\n\n\t\t\tgeometry.setAttribute( name, newAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( hadNormals ) {\n\n\t\t\tgeometry.computeVertexNormals();\n\n\t\t\tif ( oldNormals !== null ) {\n\n\t\t\t\tconst changedNormals = new Array( oldNormals.length / 3 ).fill( false );\n\n\t\t\t\tfor ( const splitData of splitIndexes )\n\t\t\t\t\tchangedNormals[ splitData.original ] = true;\n\n\t\t\t\tfor ( let i = 0; i < changedNormals.length; i ++ ) {\n\n\t\t\t\t\tif ( changedNormals[ i ] === false ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ )\n\t\t\t\t\t\t\tgeometry.attributes.normal.array[ 3 * i + j ] = oldNormals[ 3 * i + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n}\n\n\n\nexport { EdgeSplitModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}